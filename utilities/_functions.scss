// ==================================================
// TABLE OF CONTENTS
// --------------------------------------------------
//  * Pseudo
//  * Unicode
//  * Strip unit
//  * Conversion
//      - Pixel to em
//      - Pixel to rem
//      - Back to px
//      - Map to List
//  * Calculator
//      - Baseline grid
//      - Spacer
//  * List
//      - Prepend a value
//      - Insert a value at index n
//      - Remove the nth item
//  * Color
//      - Mix amount of black
//      - Mix amount of white
//  * Breakpoint
//      - Return minimum breakpoint width
//      - Return maximum breakpoint width
//      - Return minimum and maximum breakpoint width
// ==================================================



//
// Add pseudo element to values in list
//
// **************************************************

@function pseudo( $values, $element ) {
	$list: ();

	@each $value in $values {
		$value: $value + ':' + $element;
		$list: append( $list, $value, comma );
	}

	@return $list;
}



//
// Prevent unicode character conversion
//
// **************************************************

@function unicode( $string ) {
	@return unquote( '"' ) + unquote( str-insert( $string, '\\', 1 ) ) + unquote( '"' );
}



//
// Strip unit from a number
//
// **************************************************

@function strip-unit( $value ) {
	@return $value / ( $value * 0 + 1 );
}



//
// Conversion
//
// **************************************************

$font-size-base: 16px !default;
$line-height-base: 1.5 !default;


//
// Pixel to em
//

@function em( $value, $base: $font-size-base ) {
	$value: px( $value );
	$value: strip-unit( $value );
	$base: strip-unit( $base );

	@return $value / $base * 1em;
}


//
// Pixel to rem
//

@function rem( $value, $base: $font-size-base ) {
	$value: px( $value );
	$value: strip-unit( $value );
	$base: strip-unit( $base );

	@return $value / $base * 1rem;
}


//
// Back to px
//

@function px( $value, $base: 1 ) {
	$unit: unit( $value );
	$value: strip-unit( $value );

	@if ( ( $unit == 'em') or ( $unit == 'rem' ) ) {
		$base: $font-size-base;
	}

	$base: strip-unit( $base );

	@return $value * $base * 1px;
}


//
// Map to List
//

@function map-to-list( $value ) {
	$keys: ();
	$values: ();

	@each $key, $val in $value {
		$keys: append( $keys, $key );
		$values: append( $values, $val );
	}

	@return zip( $keys, $values );
}



//
// Calculator
//
// **************************************************

$spacer: 20px !default;


//
// Spacer
//

@function spacer( $amount: 1, $unit: null ) {
	$value: $spacer;
	$amount: strip-unit( $amount );

	@if $unit == 'px' {
		$value: px( $spacer );
	} @else if $unit == 'em' {
		$value: em( $spacer );
	} @else if $unit == 'rem' {
		$value: rem( $spacer );
	}

	@return $value * $amount;
}


//
// Calculate the baseline grid
//

@function base-line( $size: $font-size-base ) {
	$base-value: px( $size );
	$line-value: px( $line-height-base, $font-size-base );

	$span: ceil( $base-value / $line-value );

	@if ( ( ( $span * $line-value ) - $base-value ) < 2 ) {
		$span: $span + 1;
	}

	@return $span * $line-value / $base-value;
}



//
// List
//
// **************************************************


//
// Prepend a value
//

@function prepend( $list, $value ) {
	@return join( $value, $list );
}


//
// Insert a value at index n
//

@function insert-nth( $list, $index, $value ) {
	$result: ();

	@for $i from 1 through length( $list ) {
		@if $i == $index {
			$result: append( $result, $value );
		}

		$result: append( $result, nth( $list, $i ) );
	}

	@return $result;
}


//
// Remove the nth item
//

@function unset-nth( $list, $index ) {
	$result: ();

	@for $i from 1 through length( $list ) {
		@if $i != $index {
			$result: append( $result, nth( $list, $i ) );
		}
	}

	@return $result;
}



//
// Color
//
// **************************************************


//
// Mix amount of black
//

@function shade( $color, $percent: 50% ) {
	@return mix( #000, $color, $percent );
}


//
// Mix amount of white
//

@function tint( $color, $percent: 50% ) {
	@return mix( #fff, $color, $percent );
}



//
// Breakpoint
//
// **************************************************


//
// Return minimum breakpoint width
//

@function break-from( $query ) {
	$value: $query;

	@if map-has-key( $breakpoints, $query ) {
		$value: map-get( $breakpoints, $query );
	}

	@return if( $value != 0, $value, null );
}


//
// Return maximum breakpoint width
//

@function break-until( $query ) {
	$value: $query;

	@if map-has-key( $breakpoints, $query ) {
		$value: map-get( $breakpoints, $query );
		$unit: unit( $value );

		@if $unit == 'em' {
			$value: em( px( $value ) - 1 );
		} @else if $unit == 'rem' {
			$value: rem( px( $value ) - 1 );
		} @else {
			$value: $value - 1;
		}
	}

	@return $value;
}


//
// Return minimum and maximum breakpoint width
//

@function break-only( $query ) {
	$value: $query;
	$names: map-keys( $breakpoints );
	$index: index( $names, $query );

	@if map-has-key( $breakpoints, $query ) {
		$value: set-nth( $value, 1, break-from( $query ) );
		$query: if( $index < length( $names ), nth( $names, $index + 1 ), null );
		$value: append( $value, break-until( $query ) );
	}

	@return $value;
}
